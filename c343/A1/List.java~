abstract class List {
    abstract int length ();
    abstract boolean isEmpty();
    abstract int total ();
    abstract List append (List ys);
    
    public static void main(String[] args) {
        List xs = new Node(1, new Node(2, new Node (3, new Empty())));
        List ys = new Node(4, new Node (5, new Empty()));
        System.out.println(xs.length());
        System.out.println(xs.total());
        System.out.println(xs.append(ys).length());
    }
}

class Empty extends List {
    int length () { return 0; }
    boolean isEmpty () { return true; }
    int total () { return 0; }
    List append (List ys) { return ys; }
    List square() {return new Empty();}

    public boolean equals(Object other) {
        return other instanceof Empty;
    }
}

class Node extends List {
    private int data;
    private List rest;

    Node(int data, List rest) {
        this.data = data;
        this.rest = rest;
    }

    int length() {
        return 1 + rest.length();
    }

    boolean isEmpty() {
        return false;
    }

    int total() {
        return data + rest.total();
    }

    List append(List ys) {
        return new Node(data, rest.append(ys));
    }

    public boolean equals(Object other) {
        if (other instanceof Node) {
            Node xs = (Node) other;
            return this.data == xs.data && this.rest.equals(xs.rest);
        }
        else return false;
    }
    
    List triplicate() {
      return new Empty();
      //return new Node(data, new Node(data, new Node(data, rest.triplicate())));
    }
    
    List square(){
      return new Node(data*data, this.rest.square());
    }
    
}


